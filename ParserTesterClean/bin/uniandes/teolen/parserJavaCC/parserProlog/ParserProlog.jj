/**
 * JavaCC file
 * PQ1 de Juan Jos√© Osorio 202021720
 */

options {
  IGNORE_CASE = true;
  STATIC = false;
  ERROR_REPORTING = true;
}
PARSER_BEGIN(ParserProlog)
package uniandes.teolen.parserJavaCC.parserProlog;

import java.util.*;
import java.util.ArrayList;
 
public class ParserProlog {
	
  
} 

PARSER_END(ParserProlog)

SKIP :
{
 	" " | "\r" | "\t" | "\n"

}
TOKEN : /* OPERATORS */
{
    <ARROW: ":-">

}

TOKEN :
{
 	< PETRI: "PN" > //PQ1
|	< PLACES: "PLACES" >
| 	< TRANSITIONS: "TRANSITIONS" >
| 	< PETRIEND: "NP" >
|   < INT: ( <DIGIT> )( <DIGIT> )* > // A number is a sequence of digits, este es el number del PQ1
|   < ID: (< MAY > | < MIN >)+ > //Los identificadores del PQ1
|   < #DIGIT: ["0"-"9"] > //# es para tokens especiales
|   < #MAY: ["A"-"Z"] >
|   < #MIN: ["a"-"z"] > 
}


void hr(): //PQ1
{
	ArrayList<String> variablesCreadas = new ArrayList<String >();
}
{
	< PETRI > <ID >
	< PLACES > PlaceSpecification(variablesCreadas) ("," PlaceSpecification(variablesCreadas))*
	< TRANSITIONS > TransitionSpecification(variablesCreadas) (";" TransitionSpecification(variablesCreadas))*
	< PETRIEND >
}


void PlaceSpecification(ArrayList<String> variablesCreadas): //PQ1
{
	String nombrePlace = "";

}
{
	< ID >
	{
	  try {
	    nombrePlace = token.image;
	    variablesCreadas.add(nombrePlace);
	    
	  }catch(Exception e) { }
	}

	"("< INT >")"
}

void TransitionSpecification(ArrayList<String> variablesCreadas):
{

}
{
	< ID > "(""{"
	//Input
	(< ID >
	{
		try {
		  if (!(variablesCreadas.contains(token.image)))
		  {
		    variablesCreadas.get(variablesCreadas.size() + 1); // Para que lance un error
		  }
		}catch(Exception e)
		{
			throw new ParseException("\""+ token.image + "\"" + " is an undefined Place Name!");
		}
	}



	("," < ID >
	{
		try {
		  if (!(variablesCreadas.contains(token.image)))
		  {
		    variablesCreadas.get(variablesCreadas.size() + 1); // Para que lance un error
		  }
		}catch(Exception e)
		{
			throw new ParseException("\""+ token.image + "\"" + " is an undefined Place Name!");
		}
	}
	)*)?"}"
	//Output
	",""{"(< ID >
	{
		try {
		  if (!(variablesCreadas.contains(token.image)))
		  {
		    variablesCreadas.get(variablesCreadas.size() + 1); // Para que lance un error
		  }
		}catch(Exception e)
		{
			throw new ParseException("\""+ token.image + "\"" + " is an undefined Place Name!");
		}
	}
	("," < ID >
	{
		try {
		  if (!(variablesCreadas.contains(token.image)))
		  {
		    variablesCreadas.get(variablesCreadas.size() + 1); // Para que lance un error
		  }
		}catch(Exception e)
		{
			throw new ParseException("\""+ token.image + "\"" + " is an undefined Place Name!");
		}
	}
	)*)?"}" ")"
}

